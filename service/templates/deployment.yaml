{{- if not .Values.schedule -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
spec:
  replicas: {{ .Values.minReplicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      imagePullSecrets:
      - name: gcr-json-key
      {{- if or  (.Values.secrets) (ne .Values.db_env.DB_DIALECT "") }}
      serviceAccountName: secrets-account
      volumes:
        - name: app-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "secrets-application"
      {{- end }}
      {{- if .Values.initContainer }}
      initContainers:
        - name: {{ .Values.name }}-init
          image: {{ .Values.initContainer.image }}
          {{- if .Values.initContainer.args }}
          args: {{ .Values.initContainer.args }}
          {{- end }}
          env:
            {{- range $k,$v := .Values.initContainer.env }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k,$v := .Values.initContainer.secrets }}
            - name: {{ $k | quote }}
              valueFrom:
                secretKeyRef:
                  name: "application-secrets"
                  key:  {{ $v | quote }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.image }}
          ports:
            - name: http-port
              containerPort: {{ .Values.httpPort }}
            - name: metrics-port
              containerPort: {{ .Values.metricsPort }}
          env:
            {{- range $k,$v := .Values.env }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k,$v := .Values.secrets }}
            - name: {{ $k | quote }}
              valueFrom:
                secretKeyRef:
                  name: "application-secrets"
                  key:  {{ $v | quote }}
            {{- end }}
            {{- if ne .Values.db_env.DB_DIALECT ""}}
              {{- range $k,$v := .Values.db_env  }}
                {{- if and (eq $k "DB_PASSWORD") (eq $v "")}}
            - name: {{ $k | quote}}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.secret_key_reference }}
                  key: {{ tpl $.Values.DB_PASSWORD_KEY $}}
                {{- else if and (eq $k "DB_PORT") (eq ( $v| toString) "") }}
                  {{- if (eq $.Values.db_env.DB_DIALECT "postgres") }}
            - name: {{ $k | quote}}
              value: "5432"
                  {{- else if (eq $.Values.db_env.DB_DIALECT "mysql") }}
            - name: {{ $k | quote}}
              value: "3306"
                  {{- end }}
                {{- else }}
            - name: {{ $k | quote }}
              value: {{ tpl $v  $ | quote}}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- if or  (.Values.secrets) (ne .Values.db_env.DB_DIALECT "") }}
          # Volume mount is required for the secret to sync with kubernetes secret
          volumeMounts:
            - name: app-secrets
              mountPath: "/mnt/secrets-store"
              readOnly: true
          {{- end }}
          resources:
            requests:
              memory: {{.Values.minMemory | quote }}
              cpu: {{.Values.minCPU | quote }}
            limits:
              memory: {{.Values.maxMemory| quote }}
              cpu: {{.Values.maxCPU | quote }}
          readinessProbe:
            {{- if .Values.cliService }}
            exec:
              command:
                - ls
            {{ else }}
            httpGet:
              path: {{ .Values.heartbeatURL | quote}}
              port: {{ .Values.httpPort }}
            {{- end }}
            initialDelaySeconds: {{ (.Values.readinessProbe).initialDelaySeconds | default 3 }}
            timeoutSeconds: {{ (.Values.readinessProbe).timeoutSeconds | default 3 }}
            periodSeconds: {{ (.Values.readinessProbe).periodSeconds |default 10 }}
            failureThreshold: {{ (.Values.readinessProbe).failureThreshold | default 3 }}
          livenessProbe:
            {{- if .Values.cliService }}
            exec:
              command:
                - ls
            {{ else }}
            httpGet:
              path: {{ .Values.heartbeatURL | quote }}
              port: {{ .Values.httpPort }}
            {{- end }}
            initialDelaySeconds: {{ (.Values.livenessProbe).initialDelaySeconds | default 3 }}
            timeoutSeconds: {{ (.Values.livenessProbe).timeoutSeconds | default 3 }}
            periodSeconds: {{ (.Values.livenessProbe).periodSeconds | default 10 }}
            failureThreshold: {{ (.Values.livenessProbe).failureThreshold | default 3 }}
---
  {{- end -}}