{{- if not .Values.schedule -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    configmap.reloader.stakater.com/reload: "{{ .Values.name }}"
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
spec:
  replicas: {{ .Values.minReplicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      {{- if ne .Values.secret_key_reference "" }}
      serviceAccountName: secrets-account
      {{- end }}
      volumes:
      {{- if .Values.volumeMounts }}
      {{- range $k,$v := .Values.volumeMounts.configmaps }}
        - name: {{ $v.name }}
          configMap:
            name: {{ $v.name }}
      {{- end }}
      {{- end }}
      {{- if ne .Values.secret_key_reference "" }}
        - name: app-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "{{ .Values.name }}-secrets-application"
      {{- if .Values.env.DB_ENABLE_SSL }}
        - name: ssl-secrets
          secret:
            secretName: ssl-certs
            defaultMode: 0o600
      {{- end }}
      {{- end }}
      {{- if .Values.initContainer }}
      initContainers:
        - name: {{ .Values.name }}-init
          image: {{ .Values.initContainer.image }}
          {{- if .Values.initContainer.args }}
          args: {{ .Values.initContainer.args }}
          {{- end }}
          env:
            {{- range $k,$v := .Values.initContainer.env }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k,$v := .Values.initContainer.secrets }}
            - name: {{ $k | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{tpl .Values.secret_key_reference}}
                  key:  {{ $v | quote }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.image }}
          ports:
            - name: http-port
              containerPort: {{ .Values.httpPort }}
            - name: metrics-port
              containerPort: {{ .Values.metricsPort }}
          envFrom:
            {{- range $i, $name := .Values.envFrom.configmaps }}
            - configMapRef:
                name: {{ $name }}
            {{- end }}
            {{- range $i, $name := .Values.envFrom.secrets }}
            - secretRef:
                name: {{ $name }}
                {{- end }}
          env:
            {{- range $k,$v := .Values.env }}
              {{- if ne (toString $v) ""}}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
              {{- end }}
            {{- end }}
          # Volume mount is required for the secret to sync with kubernetes secret
          volumeMounts:
          {{- if .Values.volumeMounts }}
          {{- range $k,$v := .Values.volumeMounts.configmaps }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
            {{- if ne $v.subPath "" }}
              subPath: {{ $v.subPath }}
            {{- end }}
          {{- end }}
          {{- range $k,$v := .Values.volumeMounts.secrets }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
            {{- if ne $v.subPath "" }}
              subPath: {{ $v.subPath }}
            {{- end }}
          {{- end }}
          {{- end }}
          {{- if ne .Values.secret_key_reference "" }}
            - name: app-secrets
              mountPath: "/mnt/secrets-store"
              readOnly: true
          {{- if .Values.env.DB_ENABLE_SSL }}
            - name: ssl-secrets
              mountPath: /etc/ssl
          {{- end }}
          {{- end }}
          resources:
            requests:
              memory: {{.Values.minMemory | quote }}
              cpu: {{.Values.minCPU | quote }}
            limits:
            {{ if ne .Values.maxMemory "" }}
              memory: {{.Values.maxMemory| quote }}
            {{ end }}
            {{ if ne .Values.maxCPU "" }}
              cpu: {{.Values.maxCPU | quote }}
            {{ end }}
          {{- if .Values.readinessProbe.enable }}
          readinessProbe:
            {{- if .Values.cliService }}
            exec:
              command:
                - ls
            {{- else if ne .Values.heartbeatURL "" }}
            httpGet:
              path: {{ .Values.heartbeatURL | quote}}
              port: {{ .Values.httpPort }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 3 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 3 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds |default 10 }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- if .Values.livenessProbe.enable }}
          livenessProbe:
            {{- if .Values.cliService }}
            exec:
              command:
                - ls
            {{ else if ne .Values.heartbeatURL ""}}
            httpGet:
              path: {{ .Values.heartbeatURL | quote }}
              port: {{ .Values.httpPort }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 3 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 3 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 10 }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}
          {{- end }}

---
  {{- end -}}
