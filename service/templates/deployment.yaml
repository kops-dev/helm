{{- if not .Values.schedule -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    configmap.reloader.stakater.com/reload: "{{ .Values.name }}"
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
spec:
  replicas: {{ .Values.minReplicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      imagePullSecrets:
      - name: gcr-json-key
      {{- if ne .Values.secret_key_reference "" }}
      serviceAccountName: secrets-account
      volumes:
        - name: app-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "{{ .Values.name }}-secrets-application"
      {{- if eq .Values.env.ENABLE_SSL "true" }}
        - name: ssl-secrets
          secret:
            secretName: ssl-certs
            defaultMode: 0o600
      {{- end }}
      {{- end }}
      {{- if .Values.initContainer }}
      initContainers:
        - name: {{ .Values.name }}-init
          image: {{ .Values.initContainer.image }}
          {{- if .Values.initContainer.args }}
          args: {{ .Values.initContainer.args }}
          {{- end }}
          env:
            {{- range $k,$v := .Values.initContainer.env }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
            {{- range $k,$v := .Values.initContainer.secrets }}
            - name: {{ $k | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{tpl .Values.secret_key_reference}}
                  key:  {{ $v | quote }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.image }}
          ports:
            - name: http-port
              containerPort: {{ .Values.httpPort }}
            - name: metrics-port
              containerPort: {{ .Values.metricsPort }}
          envFrom:
            {{- if ne .Values.secret_key_reference "" }}
            - secretRef:
                name: {{ tpl $.Values.secret_key_reference $}}
            {{- end }}
            - configMapRef:
                name: {{ tpl $.Values.config_map_reference $}}
            - configMapRef:
                name: {{ tpl $.Values.env_config_map_reference $}}
          env:
            {{- range $k,$v := .Values.env }}
              {{- if ne (toString $v) ""}}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
              {{- end }}
            {{- end }}
              {{- if eq .Values.env.ENABLE_SSL "true" }}
            - name: DB_CERTIFICATE_FILE
              value: /etc/ssl/client.pem
            - name: DB_KEY_FILE
              value: /etc/ssl/private.pem
              {{- end }}
          {{- if ne .Values.secret_key_reference "" }}
          # Volume mount is required for the secret to sync with kubernetes secret
          volumeMounts:
            - name: app-secrets
              mountPath: "/mnt/secrets-store"
              readOnly: true
          {{- if eq .Values.env.ENABLE_SSL "true" }}
            - name: ssl-secrets
              mountPath: /etc/ssl
          {{- end }}
          {{- end }}
          resources:
            requests:
              memory: {{.Values.minMemory | quote }}
              cpu: {{.Values.minCPU | quote }}
            limits:
              memory: {{.Values.maxMemory| quote }}
              cpu: {{.Values.maxCPU | quote }}

          {{- if not .Values.disableProbes }}
          readinessProbe:
            {{- if .Values.cliService }}
            exec:
              command:
                - ls
            {{ else }}
            httpGet:
              path: {{ .Values.heartbeatURL | quote}}
              port: {{ .Values.httpPort }}
            {{- end }}
            initialDelaySeconds: {{ (.Values.readinessProbe).initialDelaySeconds | default 3 }}
            timeoutSeconds: {{ (.Values.readinessProbe).timeoutSeconds | default 3 }}
            periodSeconds: {{ (.Values.readinessProbe).periodSeconds |default 10 }}
            failureThreshold: {{ (.Values.readinessProbe).failureThreshold | default 3 }}
          livenessProbe:
            {{- if .Values.cliService }}
            exec:
              command:
                - ls
            {{ else }}
            httpGet:
              path: {{ .Values.heartbeatURL | quote }}
              port: {{ .Values.httpPort }}
            {{- end }}
            initialDelaySeconds: {{ (.Values.livenessProbe).initialDelaySeconds | default 3 }}
            timeoutSeconds: {{ (.Values.livenessProbe).timeoutSeconds | default 3 }}
            periodSeconds: {{ (.Values.livenessProbe).periodSeconds | default 10 }}
            failureThreshold: {{ (.Values.livenessProbe).failureThreshold | default 3 }}
          {{- end }}

---
  {{- end -}}
